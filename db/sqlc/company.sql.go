// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: company.sql

package db

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
    company_type, company_name, owner
) VALUES (
    $1, $2, $3
) RETURNING id, company_type, company_name, owner, created_at
`

type CreateCompanyParams struct {
	CompanyType string
	CompanyName string
	Owner       int64
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany, arg.CompanyType, arg.CompanyName, arg.Owner)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CompanyType,
		&i.CompanyName,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies where id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT id, company_type, company_name, owner, created_at FROM companies WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, id int64) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CompanyType,
		&i.CompanyName,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, company_type, company_name, owner, created_at FROM companies ORDER BY id LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.CompanyType,
			&i.CompanyName,
			&i.Owner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE companies SET company_name = $1 WHERE id = $2
`

type UpdateCompanyParams struct {
	CompanyName string
	ID          int64
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.ExecContext(ctx, updateCompany, arg.CompanyName, arg.ID)
	return err
}
